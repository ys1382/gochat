// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wire.proto

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	wire.proto

It has these top-level messages:
	Login
	Contact
	Text
	File
	Call
	Time
	Timestamp
	Image
	FormatDescription
	VideoSample
	AudioSample
	Av
	AVSession
	AVQuality
	Haber
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Identifies which field is filled in
type Haber_Which int32

const (
	Haber_LOGIN               Haber_Which = 0
	Haber_CONTACTS            Haber_Which = 1
	Haber_PRESENCE            Haber_Which = 2
	Haber_TEXT                Haber_Which = 3
	Haber_FILE                Haber_Which = 4
	Haber_AV                  Haber_Which = 5
	Haber_AudioSession        Haber_Which = 6
	Haber_VideoSession        Haber_Which = 7
	Haber_CALL_PROPOSAL       Haber_Which = 8
	Haber_CALL_CANCEL         Haber_Which = 9
	Haber_CALL_ACCEPT         Haber_Which = 10
	Haber_CALL_DECLINE        Haber_Which = 11
	Haber_CALL_START_OUTGOING Haber_Which = 12
	Haber_CALL_START_INCOMING Haber_Which = 13
	Haber_CALL_QUALITY        Haber_Which = 14
	Haber_CALL_STOP           Haber_Which = 15
)

var Haber_Which_name = map[int32]string{
	0:  "LOGIN",
	1:  "CONTACTS",
	2:  "PRESENCE",
	3:  "TEXT",
	4:  "FILE",
	5:  "AV",
	6:  "AudioSession",
	7:  "VideoSession",
	8:  "CALL_PROPOSAL",
	9:  "CALL_CANCEL",
	10: "CALL_ACCEPT",
	11: "CALL_DECLINE",
	12: "CALL_START_OUTGOING",
	13: "CALL_START_INCOMING",
	14: "CALL_QUALITY",
	15: "CALL_STOP",
}
var Haber_Which_value = map[string]int32{
	"LOGIN":               0,
	"CONTACTS":            1,
	"PRESENCE":            2,
	"TEXT":                3,
	"FILE":                4,
	"AV":                  5,
	"AudioSession":        6,
	"VideoSession":        7,
	"CALL_PROPOSAL":       8,
	"CALL_CANCEL":         9,
	"CALL_ACCEPT":         10,
	"CALL_DECLINE":        11,
	"CALL_START_OUTGOING": 12,
	"CALL_START_INCOMING": 13,
	"CALL_QUALITY":        14,
	"CALL_STOP":           15,
}

func (x Haber_Which) String() string {
	return proto.EnumName(Haber_Which_name, int32(x))
}
func (Haber_Which) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{14, 0} }

type Login struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
}

func (m *Login) Reset()                    { *m = Login{} }
func (m *Login) String() string            { return proto.CompactTextString(m) }
func (*Login) ProtoMessage()               {}
func (*Login) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Login) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type Contact struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Online bool   `protobuf:"varint,2,opt,name=online" json:"online,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Contact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Contact) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

type Text struct {
	Body string `protobuf:"bytes,1,opt,name=body" json:"body,omitempty"`
}

func (m *Text) Reset()                    { *m = Text{} }
func (m *Text) String() string            { return proto.CompactTextString(m) }
func (*Text) ProtoMessage()               {}
func (*Text) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Text) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type File struct {
	Key  string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *File) Reset()                    { *m = File{} }
func (m *File) String() string            { return proto.CompactTextString(m) }
func (*File) ProtoMessage()               {}
func (*File) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *File) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *File) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Call struct {
	Key   string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	To    string `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	From  string `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	Audio bool   `protobuf:"varint,4,opt,name=audio" json:"audio,omitempty"`
	Video bool   `protobuf:"varint,5,opt,name=video" json:"video,omitempty"`
}

func (m *Call) Reset()                    { *m = Call{} }
func (m *Call) String() string            { return proto.CompactTextString(m) }
func (*Call) ProtoMessage()               {}
func (*Call) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Call) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Call) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Call) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Call) GetAudio() bool {
	if m != nil {
		return m.Audio
	}
	return false
}

func (m *Call) GetVideo() bool {
	if m != nil {
		return m.Video
	}
	return false
}

type Time struct {
	Value int64  `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
	Scale int32  `protobuf:"varint,2,opt,name=scale" json:"scale,omitempty"`
	Flags uint32 `protobuf:"varint,3,opt,name=flags" json:"flags,omitempty"`
	Epoch int64  `protobuf:"varint,4,opt,name=epoch" json:"epoch,omitempty"`
}

func (m *Time) Reset()                    { *m = Time{} }
func (m *Time) String() string            { return proto.CompactTextString(m) }
func (*Time) ProtoMessage()               {}
func (*Time) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Time) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Time) GetScale() int32 {
	if m != nil {
		return m.Scale
	}
	return 0
}

func (m *Time) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *Time) GetEpoch() int64 {
	if m != nil {
		return m.Epoch
	}
	return 0
}

type Timestamp struct {
	Duration     *Time `protobuf:"bytes,1,opt,name=duration" json:"duration,omitempty"`
	Presentation *Time `protobuf:"bytes,2,opt,name=presentation" json:"presentation,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Timestamp) GetDuration() *Time {
	if m != nil {
		return m.Duration
	}
	return nil
}

func (m *Timestamp) GetPresentation() *Time {
	if m != nil {
		return m.Presentation
	}
	return nil
}

type Image struct {
	Width       int64             `protobuf:"varint,1,opt,name=width" json:"width,omitempty"`
	Height      int64             `protobuf:"varint,2,opt,name=height" json:"height,omitempty"`
	Format      uint32            `protobuf:"varint,3,opt,name=format" json:"format,omitempty"`
	Attachments map[string]string `protobuf:"bytes,4,rep,name=attachments" json:"attachments,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Data        []byte            `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *Image) Reset()                    { *m = Image{} }
func (m *Image) String() string            { return proto.CompactTextString(m) }
func (*Image) ProtoMessage()               {}
func (*Image) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Image) GetWidth() int64 {
	if m != nil {
		return m.Width
	}
	return 0
}

func (m *Image) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Image) GetFormat() uint32 {
	if m != nil {
		return m.Format
	}
	return 0
}

func (m *Image) GetAttachments() map[string]string {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *Image) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type FormatDescription struct {
	MediaType    uint32            `protobuf:"varint,1,opt,name=mediaType" json:"mediaType,omitempty"`
	MediaSubtype uint32            `protobuf:"varint,2,opt,name=mediaSubtype" json:"mediaSubtype,omitempty"`
	Extensions   map[string]string `protobuf:"bytes,3,rep,name=extensions" json:"extensions,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *FormatDescription) Reset()                    { *m = FormatDescription{} }
func (m *FormatDescription) String() string            { return proto.CompactTextString(m) }
func (*FormatDescription) ProtoMessage()               {}
func (*FormatDescription) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FormatDescription) GetMediaType() uint32 {
	if m != nil {
		return m.MediaType
	}
	return 0
}

func (m *FormatDescription) GetMediaSubtype() uint32 {
	if m != nil {
		return m.MediaSubtype
	}
	return 0
}

func (m *FormatDescription) GetExtensions() map[string]string {
	if m != nil {
		return m.Extensions
	}
	return nil
}

type VideoSample struct {
	Image *Image `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
}

func (m *VideoSample) Reset()                    { *m = VideoSample{} }
func (m *VideoSample) String() string            { return proto.CompactTextString(m) }
func (*VideoSample) ProtoMessage()               {}
func (*VideoSample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *VideoSample) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type AudioSample struct {
	Image *Image `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
}

func (m *AudioSample) Reset()                    { *m = AudioSample{} }
func (m *AudioSample) String() string            { return proto.CompactTextString(m) }
func (*AudioSample) ProtoMessage()               {}
func (*AudioSample) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *AudioSample) GetImage() *Image {
	if m != nil {
		return m.Image
	}
	return nil
}

type Av struct {
	Video *VideoSample `protobuf:"bytes,1,opt,name=video" json:"video,omitempty"`
	Audio *AudioSample `protobuf:"bytes,2,opt,name=audio" json:"audio,omitempty"`
}

func (m *Av) Reset()                    { *m = Av{} }
func (m *Av) String() string            { return proto.CompactTextString(m) }
func (*Av) ProtoMessage()               {}
func (*Av) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Av) GetVideo() *VideoSample {
	if m != nil {
		return m.Video
	}
	return nil
}

func (m *Av) GetAudio() *AudioSample {
	if m != nil {
		return m.Audio
	}
	return nil
}

type AVSession struct {
	Sid    string `protobuf:"bytes,1,opt,name=sid" json:"sid,omitempty"`
	Gid    string `protobuf:"bytes,2,opt,name=gid" json:"gid,omitempty"`
	Active bool   `protobuf:"varint,3,opt,name=active" json:"active,omitempty"`
	Data   []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *AVSession) Reset()                    { *m = AVSession{} }
func (m *AVSession) String() string            { return proto.CompactTextString(m) }
func (*AVSession) ProtoMessage()               {}
func (*AVSession) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *AVSession) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *AVSession) GetGid() string {
	if m != nil {
		return m.Gid
	}
	return ""
}

func (m *AVSession) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *AVSession) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type AVQuality struct {
	Diff int32 `protobuf:"varint,1,opt,name=diff" json:"diff,omitempty"`
}

func (m *AVQuality) Reset()                    { *m = AVQuality{} }
func (m *AVQuality) String() string            { return proto.CompactTextString(m) }
func (*AVQuality) ProtoMessage()               {}
func (*AVQuality) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *AVQuality) GetDiff() int32 {
	if m != nil {
		return m.Diff
	}
	return 0
}

type Haber struct {
	Version   uint32      `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	SessionId string      `protobuf:"bytes,2,opt,name=sessionId" json:"sessionId,omitempty"`
	From      string      `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
	To        string      `protobuf:"bytes,4,opt,name=to" json:"to,omitempty"`
	Which     Haber_Which `protobuf:"varint,15,opt,name=which,enum=Haber_Which" json:"which,omitempty"`
	// One of the following will be filled in
	Login        *Login     `protobuf:"bytes,101,opt,name=login" json:"login,omitempty"`
	Contacts     []*Contact `protobuf:"bytes,102,rep,name=contacts" json:"contacts,omitempty"`
	Text         *Text      `protobuf:"bytes,104,opt,name=text" json:"text,omitempty"`
	File         *File      `protobuf:"bytes,105,opt,name=file" json:"file,omitempty"`
	Call         *Call      `protobuf:"bytes,106,opt,name=call" json:"call,omitempty"`
	Av           *Av        `protobuf:"bytes,107,opt,name=av" json:"av,omitempty"`
	AudioSession *AVSession `protobuf:"bytes,108,opt,name=audioSession" json:"audioSession,omitempty"`
	VideoSession *AVSession `protobuf:"bytes,109,opt,name=videoSession" json:"videoSession,omitempty"`
	AvQuality    *AVQuality `protobuf:"bytes,110,opt,name=avQuality" json:"avQuality,omitempty"`
}

func (m *Haber) Reset()                    { *m = Haber{} }
func (m *Haber) String() string            { return proto.CompactTextString(m) }
func (*Haber) ProtoMessage()               {}
func (*Haber) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Haber) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *Haber) GetSessionId() string {
	if m != nil {
		return m.SessionId
	}
	return ""
}

func (m *Haber) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Haber) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Haber) GetWhich() Haber_Which {
	if m != nil {
		return m.Which
	}
	return Haber_LOGIN
}

func (m *Haber) GetLogin() *Login {
	if m != nil {
		return m.Login
	}
	return nil
}

func (m *Haber) GetContacts() []*Contact {
	if m != nil {
		return m.Contacts
	}
	return nil
}

func (m *Haber) GetText() *Text {
	if m != nil {
		return m.Text
	}
	return nil
}

func (m *Haber) GetFile() *File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *Haber) GetCall() *Call {
	if m != nil {
		return m.Call
	}
	return nil
}

func (m *Haber) GetAv() *Av {
	if m != nil {
		return m.Av
	}
	return nil
}

func (m *Haber) GetAudioSession() *AVSession {
	if m != nil {
		return m.AudioSession
	}
	return nil
}

func (m *Haber) GetVideoSession() *AVSession {
	if m != nil {
		return m.VideoSession
	}
	return nil
}

func (m *Haber) GetAvQuality() *AVQuality {
	if m != nil {
		return m.AvQuality
	}
	return nil
}

func init() {
	proto.RegisterType((*Login)(nil), "Login")
	proto.RegisterType((*Contact)(nil), "Contact")
	proto.RegisterType((*Text)(nil), "Text")
	proto.RegisterType((*File)(nil), "File")
	proto.RegisterType((*Call)(nil), "Call")
	proto.RegisterType((*Time)(nil), "Time")
	proto.RegisterType((*Timestamp)(nil), "Timestamp")
	proto.RegisterType((*Image)(nil), "Image")
	proto.RegisterType((*FormatDescription)(nil), "FormatDescription")
	proto.RegisterType((*VideoSample)(nil), "VideoSample")
	proto.RegisterType((*AudioSample)(nil), "AudioSample")
	proto.RegisterType((*Av)(nil), "Av")
	proto.RegisterType((*AVSession)(nil), "AVSession")
	proto.RegisterType((*AVQuality)(nil), "AVQuality")
	proto.RegisterType((*Haber)(nil), "Haber")
	proto.RegisterEnum("Haber_Which", Haber_Which_name, Haber_Which_value)
}

func init() { proto.RegisterFile("wire.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 958 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x6f, 0x6f, 0xe3, 0xc4,
	0x13, 0xfe, 0xc5, 0xb1, 0xd3, 0x64, 0x92, 0xb4, 0xbe, 0xbd, 0x9f, 0x38, 0x53, 0x9d, 0x44, 0x31,
	0xbc, 0x28, 0x02, 0xf9, 0x45, 0x11, 0x12, 0x20, 0x81, 0xe4, 0xf3, 0xb9, 0x25, 0x52, 0x48, 0x7a,
	0x1b, 0x5f, 0xe1, 0x40, 0xe2, 0xb4, 0x8d, 0x37, 0xcd, 0x72, 0xfe, 0x13, 0xd9, 0x9b, 0xb4, 0xfd,
	0x06, 0x7c, 0x32, 0x3e, 0x03, 0x2f, 0xf8, 0x30, 0x68, 0x76, 0x6d, 0xd7, 0xed, 0xf5, 0x05, 0xbc,
	0x9b, 0x79, 0x9e, 0xc7, 0x3b, 0x33, 0x3b, 0xb3, 0x63, 0x80, 0x6b, 0x51, 0x70, 0x6f, 0x53, 0xe4,
	0x32, 0x77, 0x3f, 0x01, 0x6b, 0x9a, 0x5f, 0x89, 0x8c, 0x1c, 0x42, 0x7f, 0x5b, 0xf2, 0x22, 0x63,
	0x29, 0x77, 0x3a, 0x47, 0x9d, 0xe3, 0x01, 0x6d, 0x7c, 0xf7, 0x2b, 0xd8, 0x0b, 0xf2, 0x4c, 0xb2,
	0xa5, 0x24, 0x04, 0xcc, 0x96, 0x44, 0xd9, 0xe4, 0x03, 0xe8, 0xe5, 0x59, 0x22, 0x32, 0xee, 0x18,
	0x47, 0x9d, 0xe3, 0x3e, 0xad, 0x3c, 0xf7, 0x10, 0xcc, 0x88, 0xdf, 0xa8, 0x6f, 0x2e, 0xf3, 0xf8,
	0xb6, 0xfe, 0x06, 0x6d, 0xf7, 0x0b, 0x30, 0x4f, 0x45, 0xc2, 0x89, 0x0d, 0xdd, 0x77, 0xbc, 0xa6,
	0xd0, 0x44, 0x75, 0xcc, 0x24, 0x53, 0x67, 0x8d, 0xa8, 0xb2, 0xdd, 0x35, 0x98, 0x01, 0x4b, 0x92,
	0x47, 0xd4, 0xfb, 0x60, 0xc8, 0x5c, 0x69, 0x07, 0xd4, 0x90, 0x39, 0x7e, 0xbd, 0x2a, 0xf2, 0xd4,
	0xe9, 0xea, 0x58, 0x68, 0x93, 0xff, 0x83, 0xc5, 0xb6, 0xb1, 0xc8, 0x1d, 0x53, 0xa5, 0xa7, 0x1d,
	0x44, 0x77, 0x22, 0xe6, 0xb9, 0x63, 0x69, 0x54, 0x39, 0xee, 0x6f, 0x60, 0x46, 0x22, 0xe5, 0x8a,
	0x65, 0xc9, 0x56, 0x17, 0xda, 0xa5, 0xda, 0x41, 0xb4, 0x5c, 0xb2, 0x44, 0x17, 0x6a, 0x51, 0xed,
	0x20, 0xba, 0x4a, 0xd8, 0x55, 0xa9, 0x82, 0x8e, 0xa9, 0x76, 0x10, 0xe5, 0x9b, 0x7c, 0xb9, 0x56,
	0x51, 0xbb, 0x54, 0x3b, 0xee, 0x1b, 0x18, 0xe0, 0xf9, 0xa5, 0x64, 0xe9, 0x86, 0x7c, 0x0c, 0xfd,
	0x78, 0x5b, 0x30, 0x29, 0xf2, 0x4c, 0xc5, 0x19, 0x9e, 0x58, 0x1e, 0xb2, 0xb4, 0x81, 0xc9, 0x67,
	0x30, 0xda, 0x14, 0xbc, 0xe4, 0x99, 0xd4, 0x32, 0xa3, 0x2d, 0xbb, 0x47, 0xb9, 0x7f, 0x77, 0xc0,
	0x9a, 0xa4, 0xec, 0x4a, 0x25, 0x74, 0x2d, 0x62, 0xb9, 0xae, 0x93, 0x57, 0x0e, 0xb6, 0x69, 0xcd,
	0xc5, 0xd5, 0x5a, 0xaa, 0x43, 0xba, 0xb4, 0xf2, 0x10, 0x5f, 0xe5, 0x45, 0xca, 0x64, 0x95, 0x7f,
	0xe5, 0x91, 0x6f, 0x60, 0xc8, 0xa4, 0x64, 0xcb, 0x75, 0xca, 0x33, 0x59, 0x3a, 0xe6, 0x51, 0xf7,
	0x78, 0x78, 0xf2, 0xcc, 0x53, 0x21, 0x3c, 0xff, 0x8e, 0x09, 0x33, 0x59, 0xdc, 0xd2, 0xb6, 0xb6,
	0xe9, 0xa1, 0x75, 0xd7, 0xc3, 0xc3, 0xef, 0xc1, 0x7e, 0xf8, 0xd1, 0x23, 0xfd, 0x6c, 0xee, 0x5d,
	0xb7, 0x54, 0x3b, 0xdf, 0x1a, 0x5f, 0x77, 0xdc, 0xbf, 0x3a, 0xf0, 0xe4, 0x54, 0x65, 0xf6, 0x92,
	0x97, 0xcb, 0x42, 0x6c, 0xd4, 0xfd, 0x3c, 0x87, 0x41, 0xca, 0x63, 0xc1, 0xa2, 0xdb, 0x8d, 0xee,
	0xd5, 0x98, 0xde, 0x01, 0xc4, 0x85, 0x91, 0x72, 0x16, 0xdb, 0x4b, 0x89, 0x02, 0x43, 0x09, 0xee,
	0x61, 0xe4, 0x05, 0x00, 0xbf, 0x91, 0x3c, 0x2b, 0x45, 0x9e, 0x61, 0x0b, 0xb1, 0x4a, 0xd7, 0x7b,
	0x2f, 0x92, 0x17, 0x36, 0x22, 0x5d, 0x70, 0xeb, 0xab, 0xc3, 0xef, 0xe0, 0xe0, 0x01, 0xfd, 0x9f,
	0x4a, 0xfb, 0x1c, 0x86, 0x17, 0x38, 0x7d, 0x0b, 0x96, 0x6e, 0x12, 0x4e, 0x9e, 0x83, 0x25, 0xf0,
	0x92, 0xab, 0x99, 0xe8, 0xe9, 0x2b, 0xa7, 0x1a, 0x44, 0xb1, 0x8f, 0x03, 0xfc, 0xaf, 0xc4, 0x53,
	0x30, 0xfc, 0x1d, 0x71, 0xeb, 0x51, 0xd7, 0x9a, 0x91, 0xd7, 0x8a, 0x56, 0x0d, 0x3e, 0x6a, 0xf4,
	0x23, 0x31, 0x2a, 0x4d, 0x2b, 0x48, 0xf5, 0x64, 0xdc, 0x5f, 0x61, 0xe0, 0x5f, 0x2c, 0x78, 0x89,
	0x65, 0x62, 0x81, 0xa5, 0x88, 0xeb, 0x02, 0x4b, 0x11, 0x23, 0x72, 0x25, 0xe2, 0xaa, 0x3c, 0x34,
	0x71, 0xb4, 0xd8, 0x52, 0x8a, 0x1d, 0x57, 0xa3, 0xd5, 0xa7, 0x95, 0xd7, 0xcc, 0x87, 0xd9, 0x7a,
	0xe3, 0x1f, 0xe1, 0xe1, 0xaf, 0xb6, 0x2c, 0x11, 0x52, 0x2f, 0x01, 0xb1, 0x5a, 0xa9, 0xd3, 0x2d,
	0xaa, 0x6c, 0xf7, 0x4f, 0x0b, 0xac, 0x1f, 0xd8, 0x25, 0x2f, 0x88, 0x03, 0x7b, 0x3b, 0x5e, 0x94,
	0xf5, 0xb3, 0x19, 0xd3, 0xda, 0xc5, 0x71, 0x28, 0x75, 0x7e, 0x93, 0x3a, 0x91, 0x3b, 0xe0, 0xd1,
	0xe5, 0xa0, 0x17, 0x88, 0xd9, 0x2c, 0x10, 0x17, 0xac, 0xeb, 0xb5, 0x58, 0xae, 0x9d, 0x83, 0xa3,
	0xce, 0xf1, 0xfe, 0xc9, 0xc8, 0x53, 0x21, 0xbd, 0x9f, 0x10, 0xa3, 0x9a, 0xc2, 0x3b, 0x4f, 0x70,
	0x69, 0x3a, 0xbc, 0xba, 0x73, 0xb5, 0x42, 0xa9, 0x06, 0xc9, 0xa7, 0xd0, 0x5f, 0xea, 0x6d, 0x59,
	0x3a, 0x2b, 0x35, 0x4e, 0x7d, 0xaf, 0x5a, 0x9f, 0xb4, 0x61, 0xc8, 0x87, 0x60, 0x4a, 0x7e, 0x23,
	0x9d, 0x75, 0xfd, 0xa0, 0xf9, 0x8d, 0xa4, 0x0a, 0x42, 0x6a, 0x25, 0x12, 0xee, 0x88, 0x8a, 0xc2,
	0x45, 0x49, 0x15, 0x84, 0xd4, 0x92, 0x25, 0x89, 0xf3, 0x7b, 0x45, 0xe1, 0x56, 0xa4, 0x0a, 0x22,
	0x4f, 0xc1, 0x60, 0x3b, 0xe7, 0x9d, 0x22, 0xba, 0x9e, 0xbf, 0xa3, 0x06, 0xdb, 0x11, 0x0f, 0x46,
	0xaa, 0x75, 0x55, 0xd3, 0x9c, 0x44, 0xd1, 0xe0, 0x35, 0x6d, 0xa4, 0xf7, 0x78, 0xd4, 0xab, 0x71,
	0xa8, 0xf5, 0xe9, 0xfb, 0xfa, 0x36, 0x4f, 0x8e, 0x61, 0xc0, 0x76, 0x55, 0xd3, 0x9c, 0xac, 0x11,
	0x57, 0x08, 0xbd, 0x23, 0xdd, 0x3f, 0x0c, 0xb0, 0xd4, 0x25, 0x92, 0x01, 0x58, 0xd3, 0xf9, 0xd9,
	0x64, 0x66, 0xff, 0x8f, 0x8c, 0xa0, 0x1f, 0xcc, 0x67, 0x91, 0x1f, 0x44, 0x0b, 0xbb, 0x83, 0xde,
	0x39, 0x0d, 0x17, 0xe1, 0x2c, 0x08, 0x6d, 0x83, 0xf4, 0xc1, 0x8c, 0xc2, 0x9f, 0x23, 0xbb, 0x8b,
	0xd6, 0xe9, 0x64, 0x1a, 0xda, 0x26, 0xe9, 0x81, 0xe1, 0x5f, 0xd8, 0x16, 0xb1, 0x61, 0xe4, 0xb7,
	0xd2, 0xb6, 0x7b, 0x88, 0x5c, 0xb4, 0x12, 0xb3, 0xf7, 0xc8, 0x13, 0x18, 0x07, 0xfe, 0x74, 0xfa,
	0xf6, 0x9c, 0xce, 0xcf, 0xe7, 0x0b, 0x7f, 0x6a, 0xf7, 0xc9, 0x01, 0x0c, 0x15, 0x14, 0xf8, 0xb3,
	0x20, 0x9c, 0xda, 0x83, 0x06, 0xf0, 0x83, 0x20, 0x3c, 0x8f, 0x6c, 0xc0, 0x63, 0x14, 0xf0, 0x32,
	0x0c, 0xa6, 0x93, 0x59, 0x68, 0x0f, 0xc9, 0x33, 0x78, 0xaa, 0x90, 0x45, 0xe4, 0xd3, 0xe8, 0xed,
	0xfc, 0x75, 0x74, 0x36, 0x9f, 0xcc, 0xce, 0xec, 0xd1, 0x03, 0x62, 0x32, 0x0b, 0xe6, 0x3f, 0x22,
	0x31, 0x6e, 0xce, 0x78, 0xf5, 0xda, 0x9f, 0x4e, 0xa2, 0x37, 0xf6, 0x3e, 0x19, 0xc3, 0xa0, 0x92,
	0xce, 0xcf, 0xed, 0x83, 0x17, 0xbd, 0x5f, 0xcc, 0x94, 0x89, 0xec, 0xb2, 0xa7, 0x7e, 0xc1, 0x5f,
	0xfe, 0x13, 0x00, 0x00, 0xff, 0xff, 0xc9, 0x76, 0x2d, 0xf3, 0x90, 0x07, 0x00, 0x00,
}
